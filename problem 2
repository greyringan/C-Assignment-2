#include<stdio.h>

struct student{
	char name;
	int pos;
};

void merge(struct student *studentList, int left, int mid, int right){
	int n = right-left+1;
	struct student temp[n];
	int i=left; int j = mid+1; int k = 0;
	while(i<=mid && j<=right){
		if(studentList[i].pos < studentList[j].pos)
			temp[k++] = *(studentList+i++);
		else
			temp[k++] = *(studentList+j++);
	}
	while(i<=mid)
		temp[k++] = *(studentList+i++);
	while(j<=right)
		temp[k++] = *(studentList+j++);
	int ind=0;
	for(i=left; i<=mid; i++)
		*(studentList+i) = temp[ind++];
	for(j=mid+1; j<=right; j++)
		*(studentList+j) = temp[ind++];
}


void mergeSort(struct student *studentList, int left, int right){
	if(left < right){
		int mid = (left + (right - 1))/2;
		mergeSort(studentList, left, mid);
		mergeSort(studentList, mid+1, right);
		merge(studentList, left, mid, right);
	}
}


int main(){
	FILE *fptr;
	fptr = fopen( "testdata.in", "r");
	if(!fptr){
		printf("File cannot be opened.");
		return -1;
	}
	int test;
	fscanf(fptr, "%d\n", &test);
//	printf("%d\n", test);
	for(int i=1; i<=test;  i++){
		int n;
		fscanf(fptr, "%d\n", &n);
//		printf("%d\n", n);
		student list[n];
		for(int j=0; j<n; j++){
			fscanf(fptr, "%d. %c\n", &list[j].pos, &list[j].name);
//			printf("%d %c\n", list[j].pos, list[j].name);
		}
		mergeSort(list, 0, n-1);
		printf("Case #%d:\n", i);
		for(int j=0; j<n; j++){
			printf("%d. %c\n", list[j].pos, list[j].name);
		}
	}
	
//	getchar();
	
//	for(int i=0;)
	fclose(fptr);
	return 0;
}
